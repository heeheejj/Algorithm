# 소수 판별 - 하나의 수가 소수인지 아닌지 판별해야 하는 경우

# 만약 수의 범위가 주어졌을 때, 범위 안에서 존재하는 모든 소수를 찾아야 하는 경우 isPrimeNumber() 대신 에라토스테네스의 체를 활용한 getPrimeNumbers를 활용하자

import math

def isPrimeNumber(x):
  if x == 1 or x == 0:
    return False
  
  for i in range(2, int(math.sqrt(x)) + 1):  # x == 2이면 for문 안돌고 바로 return True
    if x % i == 0:
      return False
  return True


# for문에서 2부터 x까지가 아닌 2부터 int(math.sqrt(x)) + 1 까지로 해준 이유
# 이코테 p.467
# 어떤 수 x의 약수들을 나열했을 때,
# x가 소수가 아니라면 중간에 오는 약수는 제곱근이거나 제곱근 근처이다
# 예1) 16의 경우,
# 1 * 16 = 16
# 2 * 8 = 16
# 4 * 4 = 16
# 8 * 2 = 16
# 16 * 1 = 16

# 가운데 약수 = 4 = 16의 제곱근, 가운데 약수 이후로는 대칭

# 따라서 4까지만 확인하면 됨

# 예2) 8의 경우,
# 1 * 8 = 8
# 2 * 4 = 8
# 4 * 2 = 8
# 8 * 1 = 8

# 8의 제곱근은 2.x이므로 2까지만 확인하면 약수 절반 확인할 수 있음! 마찬가지로 나머지 절반은 대칭
# for문에 쓸 range함수에는 정수가 들어가야 하므로 제곱근이 소수점일 경우를 대비해 int(math.sqrt(x)) + 1 이렇게 버림 하고 정수가 되도록 함